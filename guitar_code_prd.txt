<context>
# 개요
기타 코드(Guitar Code)는 기타 학습과 연습을 위한 종합적인 웹 애플리케이션입니다. 초보자부터 중급자까지 기타 코드, 스케일, 리듬 패턴을 시각적으로 학습하고, 백킹 트랙과 함께 연습할 수 있는 도구를 제공합니다. 사용자는 다양한 코드 진행을 만들고, 메트로놈으로 박자를 맞추며, 실시간으로 연습 내용을 저장하고 관리할 수 있습니다.

대상 사용자:
- 기타를 처음 배우는 초보자
- 코드 진행과 스케일을 연습하고 싶은 중급자
- 백킹 트랙과 함께 즉흥 연주를 연습하는 연주자

가치 제안:
- 시각적 학습: 프렛보드 상의 코드와 스케일을 직관적으로 표시
- 대화형 연습: 실시간 피드백과 진행 상황 추적
- 포괄적 도구 세트: 코드, 스케일, 메트로놈, 백킹 트랙을 하나의 앱에서 제공

# 핵심 기능

## 1. 코드 표시 및 학습 시스템
- 오픈 코드와 바레 코드를 시각적으로 표시
- 드래그 앤 드롭으로 코드 진행 생성
- 각 코드의 운지법과 뮤트 위치 표시
- 동적 코드 생성 (모든 키의 메이저, 마이너, 7th, sus, dim 등)

## 2. 프렛보드 시각화
- 기타 프렛보드의 모든 음 표시
- 펜타토닉 스케일과 크로매틱 스케일 시각화
- 루트 노트 강조 표시
- 스케일 패턴 학습 도구

## 3. 연습 도구
- BPM 조절 가능한 메트로놈
- 드럼 비트 백킹 트랙
- 루프 모드와 랜덤 재생 기능
- 연습 세션 기록 및 진행 상황 추적

## 4. 코드 라이브러리 관리
- 커스텀 코드 생성 및 저장
- 코드 카테고리별 분류 (기본, 바레, 특수)
- 코드 난이도 자동 계산
- 자주 사용하는 코드 즐겨찾기

# 사용자 경험

## 사용자 페르소나
1. **초보자 철수**: 기타를 막 시작한 대학생, 기본 오픈 코드부터 차근차근 배우고 싶음
2. **중급자 영희**: 2년차 기타리스트, 다양한 코드 진행과 스케일을 연습하고 싶음
3. **밴드 연주자 민수**: 밴드에서 리듬 기타 담당, 백킹 트랙과 함께 즉흥 연주 연습 필요

## 주요 사용자 흐름
1. **코드 학습 흐름**:
   - 코드 라이브러리에서 원하는 코드 선택
   - 프렛보드에서 운지법 확인
   - 메트로놈과 함께 전환 연습
   - 백킹 트랙에 맞춰 실전 연습

2. **스케일 연습 흐름**:
   - 원하는 스케일과 키 선택
   - 프렛보드에서 패턴 확인
   - 백킹 트랙과 함께 즉흥 연주
   - 녹음 및 피드백 확인

## UI/UX 고려사항
- 모바일 반응형 디자인으로 스마트폰에서도 사용 가능
- 다크/라이트 테마 지원
- 직관적인 드래그 앤 드롭 인터페이스
- 실시간 시각적 피드백
</context>
<PRD>
# 기술 아키텍처

## 시스템 구성 요소
- **프론트엔드**: React + TypeScript
- **스타일링**: Material-UI, Radix UI, Emotion, styled-components
- **오디오 엔진**: Tone.js (신디사이저), soundfont-player (MIDI)
- **상태 관리**: Zustand
- **라우팅**: React Router
- **빌드 도구**: Create React App

## 데이터 모델
- **코드 데이터**: JSON 형식 (운지법, 뮤트, 바레 정보)
- **스케일 데이터**: JSON 형식 (음계 패턴)
- **사용자 설정**: localStorage (테마, 마지막 방문 경로)
- **연습 기록**: Zustand store (세션별 임시 저장)

## API 및 통합
- Web Audio API (오디오 재생)
- MIDI 사운드폰트 (기타 사운드)
- 향후: 백엔드 API (사용자 데이터 영구 저장)

## 인프라 요구사항
- 정적 웹 호스팅 (Vercel, Netlify 등)
- CDN (오디오 파일 배포)
- 향후: 데이터베이스 (PostgreSQL/MongoDB)

# 개발 로드맵

## Phase 1: MVP (현재 상태 개선)
1. 코드 자동 생성 시스템 완성
   - 템플릿 기반 바레 코드 생성
   - 특수 코드 (sus, dim, aug) 정확한 구현
   - 코드 변환 알고리즘 최적화

2. UI/UX 개선
   - 코드 선택 인터페이스 재설계
   - 모바일 반응형 최적화
   - 접근성 개선

3. 오디오 시스템 안정화
   - 메트로놈 정확도 개선
   - 백킹 트랙 루프 버그 수정
   - 볼륨 컨트롤 추가

## Phase 2: 고급 기능
1. 코드 진행 빌더
   - 드래그 앤 드롭 시퀀서
   - 코드 진행 템플릿
   - 자동 반주 생성

2. 연습 기록 시스템
   - 연습 시간 추적
   - 진행 상황 시각화
   - 목표 설정 및 달성

3. 소셜 기능
   - 코드 진행 공유
   - 커뮤니티 라이브러리
   - 사용자 프로필

## Phase 3: 확장
1. AI 기반 기능
   - 코드 추천 시스템
   - 연주 분석 및 피드백
   - 맞춤형 연습 계획

2. 고급 음악 이론
   - 모드와 확장 스케일
   - 코드 대체 및 변형
   - 화성학 학습 도구

3. 협업 기능
   - 실시간 잼 세션
   - 밴드 연습 도구
   - 온라인 레슨 통합

# 논리적 의존성 체인

## 기반 구축 순서
1. **코드 생성 엔진** (핵심 기반)
   - 모든 코드 표시 기능의 기초
   - 다른 기능들이 의존하는 핵심 로직

2. **UI 컴포넌트 시스템**
   - 재사용 가능한 코드 표시 컴포넌트
   - 프렛보드 시각화 컴포넌트
   - 일관된 디자인 시스템

3. **오디오 엔진 통합**
   - 메트로놈 기능
   - 백킹 트랙 재생
   - 사운드 피드백 시스템

4. **상태 관리 및 데이터 흐름**
   - 전역 상태 관리 설정
   - 컴포넌트 간 데이터 흐름
   - 사용자 설정 저장

## 개발 우선순위
1. 코드 생성 버그 수정 (즉시)
2. 모바일 반응형 개선 (단기)
3. 연습 기록 시스템 (중기)
4. AI 기능 통합 (장기)

# 위험 요소 및 대응 방안

## 기술적 도전 과제
1. **오디오 지연 문제**
   - 위험: 브라우저별 Web Audio API 성능 차이
   - 대응: 버퍼링 최적화, 폴백 옵션 제공

2. **복잡한 코드 생성 로직**
   - 위험: 특수 코드의 정확한 운지법 계산
   - 대응: 음악 이론 전문가 검증, 사용자 피드백 수집

3. **크로스 브라우저 호환성**
   - 위험: Safari의 제한적인 오디오 지원
   - 대응: 기능 감지 및 대체 구현

## MVP 정의
- 기본 오픈 코드 표시 (완료)
- 메트로놈 기능 (완료)
- 코드 진행 생성 (진행 중)
- 바레/특수 코드 자동 생성 (진행 중)

## 리소스 제약
- 단일 개발자 프로젝트
- 오픈소스 라이브러리 의존
- 무료 호스팅 서비스 활용

# 부록

## 기술 명세
- React 18.2.0
- TypeScript (strict mode)
- Tone.js 15.0.4
- Material-UI 6.4.1
- Zustand 5.0.5

## 참고 자료
- 기타 코드 차트 표준
- Web Audio API 문서
- 음악 이론 기초
- UX 디자인 가이드라인

## 경쟁 제품 분석
- Ultimate Guitar (코드 라이브러리)
- Fender Play (학습 시스템)
- GuitarTuna (튜닝 및 코드)
- 차별화: 통합 연습 환경, 무료 오픈소스
</PRD>